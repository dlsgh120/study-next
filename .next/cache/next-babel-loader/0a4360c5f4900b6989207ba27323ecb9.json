{"ast":null,"code":"import _classCallCheck from \"D:/workspace/next-study/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/workspace/next-study/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/workspace/next-study/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"D:/workspace/next-study/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:/workspace/next-study/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\workspace\\\\next-study\\\\containers\\\\testContainer.tsx\",\n    _dec,\n    _class;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { Component } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nvar TestContainer = (_dec = inject(\"testStore\"), _dec(_class = observer(_class = /*#__PURE__*/function (_Component) {\n  _inherits(TestContainer, _Component);\n\n  var _super = _createSuper(TestContainer);\n\n  function TestContainer() {\n    _classCallCheck(this, TestContainer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TestContainer, [{\n    key: \"render\",\n    value: function render() {\n      var testStore = this.props.testStore;\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return TestContainer;\n}(Component)) || _class) || _class);\nexport default TestContainer;\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["D:/workspace/next-study/containers/testContainer.tsx"],"names":["inject","observer","TestContainer","Component","testStore"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA,QAAA,OAAA;AACA,SAAA,QAAA,EAAA,MAAA,QAAA,YAAA;IASME,a,WAFLF,MAAM,CAAA,WAAA,C,gBACNC,Q;;;;;;;;;;;;;6BAEU;AAAA,UACCG,SADD,GACe,KADf,KACe,CADf,SAAA;AAEP,aAAA,aACE,OAAA,CAAA,KAAA,EAAA,EAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,YAAA,EAAA;AAAA,OAAA,EADF,IACE,CADF;AAKD;;;;EARyBD,S,EAD3BF,I;AAYD,eAAA,aAAA","sourcesContent":["import React, { Component } from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\nimport TestStore from \"../stores/testStore\";\r\n\r\ninterface Props {\r\n  counter: counterStore;\r\n}\r\n\r\n@inject(\"testStore\")\r\n@observer\r\nclass TestContainer extends Component<Props, {}> {\r\n  render() {\r\n    const { testStore } = this.props;\r\n    return (\r\n      <div>\r\n        {/* {testStore.test} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TestContainer;"]},"metadata":{},"sourceType":"module"}